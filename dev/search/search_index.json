{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#tidiercatsjl","title":"TidierCats.jl","text":"<p>The goal of this package is to bring the convenience and simple usability of <code>forcats</code> in R to Julia. This package was designed to work with <code>Tidier.jl</code> but can also work independently.</p> <p>This package re-exports <code>CategoricalArrays.jl</code>.</p> <p>In addition, this package includes:</p> <ul> <li><code>cat_rev()</code></li> <li><code>cat_relevel()</code></li> <li><code>cat_infreq()</code></li> <li><code>cat_lump()</code></li> <li><code>cat_reorder()</code></li> <li><code>cat_collapse()</code></li> <li><code>cat_lump_min()</code></li> <li><code>cat_lump_prop()</code></li> <li><code>as_categorical()</code></li> </ul>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#index","title":"Index","text":"<ul> <li><code>TidierCats.as_categorical</code></li> <li><code>TidierCats.cat_collapse</code></li> <li><code>TidierCats.cat_infreq</code></li> <li><code>TidierCats.cat_lump</code></li> <li><code>TidierCats.cat_lump_min</code></li> <li><code>TidierCats.cat_lump_prop</code></li> <li><code>TidierCats.cat_relevel</code></li> <li><code>TidierCats.cat_reorder</code></li> <li><code>TidierCats.cat_rev</code></li> </ul>"},{"location":"reference/#reference-exported-functions","title":"Reference - Exported functions","text":"<p># <code>TidierCats.as_categorical</code> \u2014 Method.</p> <pre><code>as_categorical(arr::AbstractArray)\n</code></pre> <p>Converts the input array to a CategoricalArray.</p> <p>Arguments</p> <p><code>arr</code>: Input array.</p> <p>Returns</p> <p>CategoricalArray constructed from the input array.</p> <p>Examples</p> <pre><code>julia&gt; arr = [\"A\", \"B\", \"C\", \"A\", \"B\", \"B\", \"D\", \"E\", missing]\n9-element Vector{Union{Missing, String}}:\n \"A\"\n \"B\"\n \"C\"\n \"A\"\n \"B\"\n \"B\"\n \"D\"\n \"E\"\n missing\n\njulia&gt; as_categorical(arr)\n9-element CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32}:\n \"A\"\n \"B\"\n \"C\"\n \"A\"\n \"B\"\n \"B\"\n \"D\"\n \"E\"\n missing\n</code></pre> <p>source</p> <p># <code>TidierCats.cat_collapse</code> \u2014 Method.</p> <p>catcollapse(catarray::CategoricalArray, levels_map::Dict)</p> <p>Collapses levels in a categorical variable column based on a provided mapping.</p> <p>Arguments</p> <p><code>cat_array</code>: Categorical variable column to collapse. levels_map: A dictionary with the original levels as keys and the new levels as values. Levels not in the keys will be kept the same.</p> <p>Returns</p> <p>Categorical array with the levels collapsed.</p> <p>Examples</p> <pre><code>julia&gt; cat_array = CategoricalArray([\"A\", \"B\", \"C\", \"D\", \"E\"], ordered=true)\n5-element CategoricalArrays.CategoricalArray{String,1,UInt32}:\n \"A\"\n \"B\"\n \"C\"\n \"D\"\n \"E\"\n\njulia&gt; levels_map = Dict(\"A\" =&gt; \"A\", \"B\" =&gt; \"A\", \"C\" =&gt; \"C\", \"D\" =&gt; \"C\", \"E\" =&gt; \"E\");\n\njulia&gt; cat_collapse(cat_array, levels_map)\n5-element CategoricalArrays.CategoricalArray{String,1,UInt32}:\n \"A\"\n \"A\"\n \"C\"\n \"C\"\n \"E\"\n</code></pre> <p>source</p> <p># <code>TidierCats.cat_infreq</code> \u2014 Method.</p> <pre><code>cat_infreq(cat_array)\n</code></pre> <p>Orders the levels in a categorical array by their frequency, with the most common level first.</p> <p>Arguments</p> <p><code>cat_array</code>: Input categorical array.</p> <p>Returns</p> <p>Categorical array with levels reordered by frequency.</p> <p>Examples</p> <pre><code>julia&gt; cat_array = CategoricalArray([\"A\", \"B\", \"B\"], ordered=true)\n3-element CategoricalArrays.CategoricalArray{String,1,UInt32}:\n \"A\"\n \"B\"\n \"B\"\n\njulia&gt; cat_infreq(cat_array)\n3-element CategoricalArrays.CategoricalArray{String,1,UInt32}:\n \"A\"\n \"B\"\n \"B\"\n</code></pre> <p>source</p> <p># <code>TidierCats.cat_lump</code> \u2014 Method.</p> <pre><code>cat_lump(cat_array, n::Int)\n</code></pre> <p>Orders the levels in a categorical array by their frequency and keeps only the 'n' most common levels. All other levels are replaced by \"Other\".</p> <p>Arguments <code>cat_array</code>: Input categorical array. <code>n</code>: Number of levels to keep as they are, the rest become \"Other\"</p> <p>Returns</p> <p>Categorical array with the least frequent levels lumped as \"Other\". </p> <p>Examples</p> <pre><code>julia&gt; cat_array = CategoricalArray([\"A\", \"B\", \"C\", \"A\", \"B\", \"B\", \"D\", \"E\", \"F\"], ordered=true)\n9-element CategoricalArrays.CategoricalArray{String,1,UInt32}:\n \"A\"\n \"B\"\n \"C\"\n \"A\"\n \"B\"\n \"B\"\n \"D\"\n \"E\"\n \"F\"\n</code></pre> <p>source</p> <p># <code>TidierCats.cat_lump_min</code> \u2014 Function.</p> <pre><code>cat_lump_min(cat_array, min::Int, other_level::String = \"Other\")\n</code></pre> <p>Lumps infrequent levels in a categorical array into an 'other' level based on minimum count.</p> <p>Arguments</p> <ul> <li><code>cat_array</code>: Categorical array to lump</li> <li><code>min</code>: Minimum count threshold. Levels with counts below this will be lumped.</li> <li><code>other_level</code>: The level name to lump infrequent levels into. Default is \"Other\".</li> </ul> <p>Returns</p> <p>Categorical array with levels lumped.</p> <p>Examples</p> <p>```jldoctest  julia&gt; cat_array = CategoricalArray([\"A\", \"B\", \"B\", \"C\", \"C\", \"D\"]) 6-element CategoricalArrays.CategoricalArray{String,1,UInt32}:  \"A\"   \"B\"  \"B\"  \"C\"   \"C\"  \"D\"</p> <p>julia&gt; catlumpmin(cat_array, 2)   6-element CategoricalArrays.CategoricalArray{String,1,UInt32}:  \"A\"  \"B\"  \"B\"  \"Other\"  \"Other\"  \"Other\"  ```</p> <p>source</p> <p># <code>TidierCats.cat_lump_prop</code> \u2014 Function.</p> <pre><code>cat_lump_prop(cat_array, prop::Float64, other_level::String = \"Other\")\n</code></pre> <p>Lumps infrequent levels in a categorical array into an 'other' level based on proportion threshold.</p> <p>Arguments</p> <ul> <li><code>cat_array</code>: Categorical array to lump</li> <li><code>prop</code>: Proportion threshold. Levels with proportions below this will be lumped.</li> <li><code>other_level</code>: The level name to lump infrequent levels into. Default is \"Other\".</li> </ul> <p>Returns</p> <p>Categorical array with levels lumped based on proportion.</p> <p>Examples</p> <p>```jldoctest julia&gt; cat_array = CategoricalArray([\"A\", \"B\", \"B\", \"C\", \"C\", \"D\"]) 6-element CategoricalArrays.CategoricalArray{String,1,UInt32}:  \"A\"  \"B\"   \"B\"  \"C\"  \"C\"   \"D\"</p> <p>julia&gt; catlumpprop(cat_array, 0.3) 6-element CategoricalArrays.CategoricalArray{String,1,UInt32}:  \"A\"  \"B\"  \"B\"  \"Other\"   \"Other\"  \"Other\"  ```</p> <p>source</p> <p># <code>TidierCats.cat_relevel</code> \u2014 Method.</p> <pre><code>cat_relevel(cat_array::CategoricalArray, levels_order::Vector{String})\n</code></pre> <p>Reorders the levels in a categorical array according to the provided order.</p> <p>Arguments</p> <p><code>cat_array</code>: Input categorical array. <code>levels_order</code>: Vector of levels in the desired order.</p> <p>Returns</p> <p>Categorical array with levels reordered according to levels_order.</p> <p>Examples</p> <pre><code>julia&gt; cat_array = CategoricalArray([\"A\", \"B\", \"C\", \"A\", \"B\", \"B\"], ordered=true)\n6-element CategoricalArrays.CategoricalArray{String,1,UInt32}:\n \"A\"\n \"B\"\n \"C\"\n \"A\"\n \"B\"\n \"B\"\n\njulia&gt; cat_relevel(cat_array, [\"B\", \"A\", \"C\"])\n6-element CategoricalArrays.CategoricalArray{String,1,UInt32}:\n \"A\"\n \"B\"\n \"C\"\n \"A\"\n \"B\"\n \"B\"\n</code></pre> <p>source</p> <p># <code>TidierCats.cat_reorder</code> \u2014 Function.</p> <pre><code>cat_reorder(cat_var::AbstractVector, order_var::AbstractVector, fun::String, desc::Bool=true)\n</code></pre> <p>Reorders the levels in a categorical variable column based on a summary statistic calculated from another variable.</p> <p>Arguments <code>cat_var</code>: Categorical variable column to reorder. <code>order_var</code>: Variable to calculate the summary statistic from. <code>fun</code>: Function to calculate the summary statistic. Options are \"mean\" and \"median\". <code>desc</code>: If true, the levels are ordered in descending order of the summary statistic.</p> <p>Returns</p> <p>Categorical array with the levels reordered.</p> <p>Examples</p> <pre><code>julia&gt; cat_var = String[\"A\", \"B\", \"A\", \"B\", \"A\", \"B\", \"C\", \"C\", \"C\"];\norder_var = [1, 2, 3, 4, 5, 6, 7, 8, 9];\ncat_reorder(cat_var, order_var, \"mean\")\n9-element CategoricalArrays.CategoricalArray{String,1,UInt32}:\n \"A\"\n \"B\"\n \"A\"\n \"B\"\n \"A\"\n \"B\"\n \"C\"\n \"C\"\n \"C\"\n</code></pre> <p>source</p> <p># <code>TidierCats.cat_rev</code> \u2014 Method.</p> <pre><code>cat_rev(cat_array)\n</code></pre> <p>Reverses the order of levels in a categorical array.</p> <p>Arguments</p> <p><code>cat_array</code>: Input categorical array.</p> <p>Returns</p> <p>Categorical array with reversed order of levels.</p> <p>Examples</p> <pre><code>julia&gt; cat_array = CategoricalArray([\"A\", \"B\", \"C\", \"A\", \"B\", \"B\"], ordered=true)\n6-element CategoricalArrays.CategoricalArray{String,1,UInt32}:\n \"A\"\n \"B\"\n \"C\"\n \"A\"\n \"B\"\n \"B\"\n\njulia&gt; cat_rev(cat_array)\n6-element CategoricalArrays.CategoricalArray{String,1,UInt32}:\n \"A\"\n \"B\"\n \"C\"\n \"A\"\n \"B\"\n \"B\"\n</code></pre> <p>source</p> <p></p> <p></p>"},{"location":"reference/#reference-internal-functions","title":"Reference - Internal functions","text":""},{"location":"examples/generated/UserGuide/supported_functions/","title":"Supported Functions","text":"<pre><code>using TidierData\nusing TidierCats\nusing Random\n\nRandom.seed!(10)\n\ncategories = [\"High\", \"Medium\", \"Low\", \"Zilch\"]\n\nrandom_indices = rand(1:length(categories), 57)\n\ndf = DataFrame(\nID = 1:57,\nCatVar = categorical([categories[i] for i in random_indices], levels = categories)\n)\nfirst(df, 5)\n</code></pre> 5\u00d72 DataFrame RowIDCatVarInt64Cat\u202611Medium22High33High44High55Medium"},{"location":"examples/generated/UserGuide/supported_functions/#cat_relevel","title":"<code>cat_relevel()</code>","text":"<p>This function changes the order of levels in a categorical variable. It accepts two arguments - a column name and an array of levels in the desired order.</p> <pre><code>custom_order = @chain df begin\n@mutate(CatVar = cat_relevel(CatVar, [\"Zilch\", \"Medium\", \"High\", \"Low\"]))\nend\n\nprint(levels(df.CatVar))\n</code></pre> <pre><code>[\"High\", \"Medium\", \"Low\", \"Zilch\"]\n</code></pre> <p>and</p> <pre><code>print(levels(custom_order.CatVar))\n</code></pre> <pre><code>[\"Zilch\", \"Medium\", \"High\", \"Low\"]\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/supported_functions/#cat_rev","title":"<code>cat_rev()</code>","text":"<p>This function reverses the order of levels in a categorical variable. It only requires one argument - the column name whose levels are to be reversed</p> <pre><code>reversed_order = @chain df begin\n@mutate(CatVar = cat_rev(CatVar))\nend\n\nprint(levels(df.CatVar))\n</code></pre> <pre><code>[\"High\", \"Medium\", \"Low\", \"Zilch\"]\n</code></pre> <p>and</p> <pre><code>print(levels(reversed_order.CatVar))\n</code></pre> <pre><code>[\"Zilch\", \"Low\", \"Medium\", \"High\"]\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/supported_functions/#cat_infreq","title":"<code>cat_infreq()</code>","text":"<p>This function reorders levels of a categorical variable based on their frequencies, with most frequent level first. The single argument is column name</p> <pre><code>@chain df begin\n@count(CatVar)\nend\n\norderedbyfrequency = @chain df begin\n@mutate(CatVar = cat_infreq(CatVar))\nend\n\nprint(levels(df.CatVar))\n</code></pre> <pre><code>[\"High\", \"Medium\", \"Low\", \"Zilch\"]\n</code></pre> <p>and</p> <pre><code>print(levels(orderedbyfrequency.CatVar))\n\n\n@chain df begin\n@count(CatVar)\nend\n</code></pre> 4\u00d72 DataFrame RowCatVarnCat\u2026Int641High192Medium113Low144Zilch13 <p></p> <p></p>"},{"location":"examples/generated/UserGuide/supported_functions/#cat_lump","title":"<code>cat_lump()</code>","text":"<p>This function lumps the least frequent levels into a new \"Other\" level. It accepts two arguments - a column name and an integer specifying the number of levels to keep.</p> <pre><code>lumped_cats = @chain df begin\n@mutate(CatVar = cat_lump(CatVar,2))\nend\n\nprint(levels(df.CatVar))\n</code></pre> <pre><code>[\"High\", \"Medium\", \"Low\", \"Zilch\"]\n</code></pre> <p>and</p> <pre><code>print(levels(lumped_cats.CatVar))\n\n\n@chain lumped_cats begin\n@count(CatVar)\nend\n</code></pre> 3\u00d72 DataFrame RowCatVarnCat\u2026Int641High192Low143Other24 <p></p> <p></p>"},{"location":"examples/generated/UserGuide/supported_functions/#cat_reorder","title":"<code>cat_reorder()</code>","text":"<p>This function reorders levels of a categorical variable based on a mean of a second variable. It takes three arguments - a categorical column , a numerical column by which to reorder, and a function to calculate the summary statistic (currently only supports mean, median). There is a fourth optional argument which defaults to true, if set to false, it order the categories in ascending order.</p> <pre><code>df3 = DataFrame(\ncat_var = repeat([\"Low\", \"Medium\", \"High\"], outer = 10),\norder_var = rand(30)\n)\n\ndf4 = @chain df3 begin\n@mutate(cat_var= cat_reorder(cat_var, order_var, \"median\" ))\nend\n\n\nprint(levels(df3.cat_var))\n</code></pre> <pre><code>[\"High\", \"Low\", \"Medium\"]\n</code></pre> <p>and</p> <pre><code>print(levels(df4.cat_var))\n\n\n@chain df3 begin\n@mutate(catty = as_categorical(cat_var))\n@group_by(catty)\nend\n</code></pre> <p>GroupedDataFrame with 3 groups based on key: catty</p> First Group (10 rows): catty = CategoricalValue{String, UInt32} \"High\" Rowcat_varorder_varcattyStringFloat64Cat\u20261High0.00850037High2High0.147158High3High0.508575High4High0.402147High5High0.295689High6High0.0701535High7High0.719709High8High0.150888High9High0.612444High10High0.109374High <p>&amp;vellip;</p> Last Group (10 rows): catty = CategoricalValue{String, UInt32} \"Medium\" Rowcat_varorder_varcattyStringFloat64Cat\u20261Medium0.429062Medium2Medium0.00639559Medium3Medium0.228944Medium4Medium0.0129227Medium5Medium0.460252Medium6Medium0.0730981Medium7Medium0.886647Medium8Medium0.101007Medium9Medium0.691711Medium10Medium0.480414Medium <p></p> <p></p>"},{"location":"examples/generated/UserGuide/supported_functions/#cat_collapse","title":"<code>cat_collapse()</code>","text":"<p>This function collapses levels in a categorical variable according to a specified mapping. It requires two arguments - a categorical column and a dictionary that maps original levels to new ones.</p> <pre><code>df5 = @chain df begin\n@mutate(CatVar = cat_collapse(CatVar, Dict(\"Low\" =&gt; \"bad\", \"Zilch\" =&gt; \"bad\")))\nend\n\nprint(levels(df.CatVar))\n</code></pre> <pre><code>[\"High\", \"Medium\", \"Low\", \"Zilch\"]\n</code></pre> <p>and</p> <pre><code>print(levels(df5.CatVar))\n</code></pre> <pre><code>[\"High\", \"Medium\", \"bad\"]\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/supported_functions/#as_categorical","title":"<code>as_categorical()</code>","text":"<p>This function converts a standard Julia array to a categorical array. The only argument it needs is the colunn name to be converted.</p> <pre><code>test = DataFrame( w = [\"A\", \"B\", \"C\", \"D\"])\n\n@chain test begin\n@mutate(w = as_categorical(w))\nend\n</code></pre> 4\u00d71 DataFrame RowwCat\u20261A2B3C4D <p></p> <p></p>"},{"location":"examples/generated/UserGuide/supported_functions/#cat_lump_min","title":"<code>cat_lump_min()</code>","text":"<p>This function wil lump any cargory with less than the minimum number of entries and recateogrize it as \"Other\" as the default, or a category name chosen by the user</p> <pre><code>@chain df begin\n@count(CatVar)\nend\nlumpedbymin = @chain df begin\n@mutate(CatVar = cat_lump_min(CatVar, 14))\nend\n\nprint(levels(df.CatVar))\n</code></pre> <pre><code>[\"High\", \"Medium\", \"Low\", \"Zilch\"]\n</code></pre> <p>and</p> <pre><code>print(levels(lumpedbymin.CatVar))\n</code></pre> <pre><code>[\"High\", \"Low\", \"Other\"]\n</code></pre> <p></p>"},{"location":"examples/generated/UserGuide/supported_functions/#cat_lump_min_1","title":"<code>cat_lump_min()</code>","text":"<p>This function wil lump any cargory with less than the minimum proportion and recateogrize it as \"Other\" as the default, or a category name chosen by the user</p> <pre><code>lumpedbyprop = @chain df begin\n@mutate(CatVar = cat_lump_prop(CatVar, .25, \"wow\"))\nend\n\n\nprint(levels(df.CatVar))\n</code></pre> <pre><code>[\"High\", \"Medium\", \"Low\", \"Zilch\"]\n</code></pre> <p>and</p> <pre><code>print(levels(lumpedbyprop.CatVar))\n</code></pre> <pre><code>[\"High\", \"wow\"]\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/supported_functions/#cat_na_value_to_level","title":"<code>cat_na_value_to_level()</code>","text":"<p>This function will replace any missing values in a categorical array with \"Missing\" to make sure they appear on plots.</p> <pre><code>#x = categorical([missing, \"A\", \"B\", missing, \"A\"])\n#cat_na_value_to_level(x)\n#print(levels(x))\n</code></pre> <p>This page was generated using Literate.jl.</p>"}]}